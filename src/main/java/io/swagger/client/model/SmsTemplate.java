/*
 * Notification API
 * <b>Notification</b>  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.TemplateValue;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * SmsTemplate
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-05T15:49:18.314Z")
public class SmsTemplate {
  @SerializedName("from")
  private String from = null;

  @SerializedName("to")
  private List<String> to = new ArrayList<String>();

  @SerializedName("templateId")
  private String templateId = null;

  @SerializedName("templateValues")
  private List<TemplateValue> templateValues = new ArrayList<TemplateValue>();

  public SmsTemplate from(String from) {
    this.from = from;
    return this;
  }

   /**
   * sms sender
   * @return from
  **/
  @ApiModelProperty(value = "sms sender")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public SmsTemplate to(List<String> to) {
    this.to = to;
    return this;
  }

  public SmsTemplate addToItem(String toItem) {
    this.to.add(toItem);
    return this;
  }

   /**
   * \&quot;sms recipients (the country number, preceded by + sign, is mandatory, like: +393408749787)\&quot;
   * @return to
  **/
  @ApiModelProperty(required = true, value = "\"sms recipients (the country number, preceded by + sign, is mandatory, like: +393408749787)\"")
  public List<String> getTo() {
    return to;
  }

  public void setTo(List<String> to) {
    this.to = to;
  }

  public SmsTemplate templateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

   /**
   * sms template id
   * @return templateId
  **/
  @ApiModelProperty(required = true, value = "sms template id")
  public String getTemplateId() {
    return templateId;
  }

  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }

  public SmsTemplate templateValues(List<TemplateValue> templateValues) {
    this.templateValues = templateValues;
    return this;
  }

  public SmsTemplate addTemplateValuesItem(TemplateValue templateValuesItem) {
    this.templateValues.add(templateValuesItem);
    return this;
  }

   /**
   * template key-value pair placeholders
   * @return templateValues
  **/
  @ApiModelProperty(required = true, value = "template key-value pair placeholders")
  public List<TemplateValue> getTemplateValues() {
    return templateValues;
  }

  public void setTemplateValues(List<TemplateValue> templateValues) {
    this.templateValues = templateValues;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SmsTemplate smsTemplate = (SmsTemplate) o;
    return Objects.equals(this.from, smsTemplate.from) &&
        Objects.equals(this.to, smsTemplate.to) &&
        Objects.equals(this.templateId, smsTemplate.templateId) &&
        Objects.equals(this.templateValues, smsTemplate.templateValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, to, templateId, templateValues);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SmsTemplate {\n");
    
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    templateValues: ").append(toIndentedString(templateValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

