/*
 * Customer Reliability
 *  <b>Customer Reliability</b>  
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.GetCustomerReliabilityDocumentRequest;
import io.swagger.client.model.GetCustomerReliabilityDocumentResponse;
import io.swagger.client.model.GetCustomerReliabilityResultRequest;
import io.swagger.client.model.GetCustomerReliabilityResultResponse;
import io.swagger.client.model.VerifyCustomerReliabilityRequest;
import io.swagger.client.model.VerifyCustomerReliabilityResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomerReliabilityApi {
    private ApiClient apiClient;

    public CustomerReliabilityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomerReliabilityApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCustomerReliabilityDocument
     * @param MT_APPLICATION technical code of the application calling the service. Needs to be agreed with the service provider (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request. Needs to be agreed with the service provider  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Needs to be agreed with the service provider (required)
     * @param MT_COMPANY Company code. Needs to be agreed with the service provider (required)
     * @param MT_PARTNER Partner belonging to the company. It describe a subset of NEXI customer related to the specified partner. Needs to be agreed with the service provider (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client. Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @param getCustomerReliabilityDocument  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerReliabilityDocumentCall(String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_PARTNER, String MT_REQUEST_ID, String MT_SESSION_ID, GetCustomerReliabilityDocumentRequest getCustomerReliabilityDocument, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getCustomerReliabilityDocument;

        // create path and map variables
        String localVarPath = "/getCustomerReliabilityDocument";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (MT_APPLICATION != null)
        localVarHeaderParams.put("MT_APPLICATION", apiClient.parameterToString(MT_APPLICATION));
        if (MT_USER != null)
        localVarHeaderParams.put("MT_USER", apiClient.parameterToString(MT_USER));
        if (MT_CHANNEL != null)
        localVarHeaderParams.put("MT_CHANNEL", apiClient.parameterToString(MT_CHANNEL));
        if (MT_COMPANY_GROUP != null)
        localVarHeaderParams.put("MT_COMPANY_GROUP", apiClient.parameterToString(MT_COMPANY_GROUP));
        if (MT_COMPANY != null)
        localVarHeaderParams.put("MT_COMPANY", apiClient.parameterToString(MT_COMPANY));
        if (MT_PARTNER != null)
        localVarHeaderParams.put("MT_PARTNER", apiClient.parameterToString(MT_PARTNER));
        if (MT_REQUEST_ID != null)
        localVarHeaderParams.put("MT_REQUEST_ID", apiClient.parameterToString(MT_REQUEST_ID));
        if (MT_SESSION_ID != null)
        localVarHeaderParams.put("MT_SESSION_ID", apiClient.parameterToString(MT_SESSION_ID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerReliabilityDocumentValidateBeforeCall(String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_PARTNER, String MT_REQUEST_ID, String MT_SESSION_ID, GetCustomerReliabilityDocumentRequest getCustomerReliabilityDocument, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'MT_APPLICATION' is set
        if (MT_APPLICATION == null) {
            throw new ApiException("Missing the required parameter 'MT_APPLICATION' when calling getCustomerReliabilityDocument(Async)");
        }
        
        // verify the required parameter 'MT_USER' is set
        if (MT_USER == null) {
            throw new ApiException("Missing the required parameter 'MT_USER' when calling getCustomerReliabilityDocument(Async)");
        }
        
        // verify the required parameter 'MT_CHANNEL' is set
        if (MT_CHANNEL == null) {
            throw new ApiException("Missing the required parameter 'MT_CHANNEL' when calling getCustomerReliabilityDocument(Async)");
        }
        
        // verify the required parameter 'MT_COMPANY_GROUP' is set
        if (MT_COMPANY_GROUP == null) {
            throw new ApiException("Missing the required parameter 'MT_COMPANY_GROUP' when calling getCustomerReliabilityDocument(Async)");
        }
        
        // verify the required parameter 'MT_COMPANY' is set
        if (MT_COMPANY == null) {
            throw new ApiException("Missing the required parameter 'MT_COMPANY' when calling getCustomerReliabilityDocument(Async)");
        }
        
        // verify the required parameter 'MT_PARTNER' is set
        if (MT_PARTNER == null) {
            throw new ApiException("Missing the required parameter 'MT_PARTNER' when calling getCustomerReliabilityDocument(Async)");
        }
        
        // verify the required parameter 'MT_REQUEST_ID' is set
        if (MT_REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'MT_REQUEST_ID' when calling getCustomerReliabilityDocument(Async)");
        }
        
        // verify the required parameter 'MT_SESSION_ID' is set
        if (MT_SESSION_ID == null) {
            throw new ApiException("Missing the required parameter 'MT_SESSION_ID' when calling getCustomerReliabilityDocument(Async)");
        }
        
        // verify the required parameter 'getCustomerReliabilityDocument' is set
        if (getCustomerReliabilityDocument == null) {
            throw new ApiException("Missing the required parameter 'getCustomerReliabilityDocument' when calling getCustomerReliabilityDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = getCustomerReliabilityDocumentCall(MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_PARTNER, MT_REQUEST_ID, MT_SESSION_ID, getCustomerReliabilityDocument, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getCustomerReliabilityDocument
     * get CustomerReliabilityDocument
     * @param MT_APPLICATION technical code of the application calling the service. Needs to be agreed with the service provider (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request. Needs to be agreed with the service provider  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Needs to be agreed with the service provider (required)
     * @param MT_COMPANY Company code. Needs to be agreed with the service provider (required)
     * @param MT_PARTNER Partner belonging to the company. It describe a subset of NEXI customer related to the specified partner. Needs to be agreed with the service provider (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client. Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @param getCustomerReliabilityDocument  (required)
     * @return GetCustomerReliabilityDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetCustomerReliabilityDocumentResponse getCustomerReliabilityDocument(String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_PARTNER, String MT_REQUEST_ID, String MT_SESSION_ID, GetCustomerReliabilityDocumentRequest getCustomerReliabilityDocument) throws ApiException {
        ApiResponse<GetCustomerReliabilityDocumentResponse> resp = getCustomerReliabilityDocumentWithHttpInfo(MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_PARTNER, MT_REQUEST_ID, MT_SESSION_ID, getCustomerReliabilityDocument);
        return resp.getData();
    }

    /**
     * getCustomerReliabilityDocument
     * get CustomerReliabilityDocument
     * @param MT_APPLICATION technical code of the application calling the service. Needs to be agreed with the service provider (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request. Needs to be agreed with the service provider  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Needs to be agreed with the service provider (required)
     * @param MT_COMPANY Company code. Needs to be agreed with the service provider (required)
     * @param MT_PARTNER Partner belonging to the company. It describe a subset of NEXI customer related to the specified partner. Needs to be agreed with the service provider (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client. Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @param getCustomerReliabilityDocument  (required)
     * @return ApiResponse&lt;GetCustomerReliabilityDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetCustomerReliabilityDocumentResponse> getCustomerReliabilityDocumentWithHttpInfo(String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_PARTNER, String MT_REQUEST_ID, String MT_SESSION_ID, GetCustomerReliabilityDocumentRequest getCustomerReliabilityDocument) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerReliabilityDocumentValidateBeforeCall(MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_PARTNER, MT_REQUEST_ID, MT_SESSION_ID, getCustomerReliabilityDocument, null, null);
        Type localVarReturnType = new TypeToken<GetCustomerReliabilityDocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getCustomerReliabilityDocument (asynchronously)
     * get CustomerReliabilityDocument
     * @param MT_APPLICATION technical code of the application calling the service. Needs to be agreed with the service provider (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request. Needs to be agreed with the service provider  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Needs to be agreed with the service provider (required)
     * @param MT_COMPANY Company code. Needs to be agreed with the service provider (required)
     * @param MT_PARTNER Partner belonging to the company. It describe a subset of NEXI customer related to the specified partner. Needs to be agreed with the service provider (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client. Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @param getCustomerReliabilityDocument  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerReliabilityDocumentAsync(String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_PARTNER, String MT_REQUEST_ID, String MT_SESSION_ID, GetCustomerReliabilityDocumentRequest getCustomerReliabilityDocument, final ApiCallback<GetCustomerReliabilityDocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerReliabilityDocumentValidateBeforeCall(MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_PARTNER, MT_REQUEST_ID, MT_SESSION_ID, getCustomerReliabilityDocument, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetCustomerReliabilityDocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomerReliabilityResult
     * @param MT_APPLICATION technical code of the application calling the service. Needs to be agreed with the service provider (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request. Needs to be agreed with the service provider  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Needs to be agreed with the service provider (required)
     * @param MT_COMPANY Company code. Needs to be agreed with the service provider (required)
     * @param MT_PARTNER Partner belonging to the company. It describe a subset of NEXI customer related to the specified partner. Needs to be agreed with the service provider (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client. Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @param getCustomerReliabilityResult  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerReliabilityResultCall(String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_PARTNER, String MT_REQUEST_ID, String MT_SESSION_ID, GetCustomerReliabilityResultRequest getCustomerReliabilityResult, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getCustomerReliabilityResult;

        // create path and map variables
        String localVarPath = "/getCustomerReliabilityResult";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (MT_APPLICATION != null)
        localVarHeaderParams.put("MT_APPLICATION", apiClient.parameterToString(MT_APPLICATION));
        if (MT_USER != null)
        localVarHeaderParams.put("MT_USER", apiClient.parameterToString(MT_USER));
        if (MT_CHANNEL != null)
        localVarHeaderParams.put("MT_CHANNEL", apiClient.parameterToString(MT_CHANNEL));
        if (MT_COMPANY_GROUP != null)
        localVarHeaderParams.put("MT_COMPANY_GROUP", apiClient.parameterToString(MT_COMPANY_GROUP));
        if (MT_COMPANY != null)
        localVarHeaderParams.put("MT_COMPANY", apiClient.parameterToString(MT_COMPANY));
        if (MT_PARTNER != null)
        localVarHeaderParams.put("MT_PARTNER", apiClient.parameterToString(MT_PARTNER));
        if (MT_REQUEST_ID != null)
        localVarHeaderParams.put("MT_REQUEST_ID", apiClient.parameterToString(MT_REQUEST_ID));
        if (MT_SESSION_ID != null)
        localVarHeaderParams.put("MT_SESSION_ID", apiClient.parameterToString(MT_SESSION_ID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerReliabilityResultValidateBeforeCall(String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_PARTNER, String MT_REQUEST_ID, String MT_SESSION_ID, GetCustomerReliabilityResultRequest getCustomerReliabilityResult, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'MT_APPLICATION' is set
        if (MT_APPLICATION == null) {
            throw new ApiException("Missing the required parameter 'MT_APPLICATION' when calling getCustomerReliabilityResult(Async)");
        }
        
        // verify the required parameter 'MT_USER' is set
        if (MT_USER == null) {
            throw new ApiException("Missing the required parameter 'MT_USER' when calling getCustomerReliabilityResult(Async)");
        }
        
        // verify the required parameter 'MT_CHANNEL' is set
        if (MT_CHANNEL == null) {
            throw new ApiException("Missing the required parameter 'MT_CHANNEL' when calling getCustomerReliabilityResult(Async)");
        }
        
        // verify the required parameter 'MT_COMPANY_GROUP' is set
        if (MT_COMPANY_GROUP == null) {
            throw new ApiException("Missing the required parameter 'MT_COMPANY_GROUP' when calling getCustomerReliabilityResult(Async)");
        }
        
        // verify the required parameter 'MT_COMPANY' is set
        if (MT_COMPANY == null) {
            throw new ApiException("Missing the required parameter 'MT_COMPANY' when calling getCustomerReliabilityResult(Async)");
        }
        
        // verify the required parameter 'MT_PARTNER' is set
        if (MT_PARTNER == null) {
            throw new ApiException("Missing the required parameter 'MT_PARTNER' when calling getCustomerReliabilityResult(Async)");
        }
        
        // verify the required parameter 'MT_REQUEST_ID' is set
        if (MT_REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'MT_REQUEST_ID' when calling getCustomerReliabilityResult(Async)");
        }
        
        // verify the required parameter 'MT_SESSION_ID' is set
        if (MT_SESSION_ID == null) {
            throw new ApiException("Missing the required parameter 'MT_SESSION_ID' when calling getCustomerReliabilityResult(Async)");
        }
        
        // verify the required parameter 'getCustomerReliabilityResult' is set
        if (getCustomerReliabilityResult == null) {
            throw new ApiException("Missing the required parameter 'getCustomerReliabilityResult' when calling getCustomerReliabilityResult(Async)");
        }
        

        com.squareup.okhttp.Call call = getCustomerReliabilityResultCall(MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_PARTNER, MT_REQUEST_ID, MT_SESSION_ID, getCustomerReliabilityResult, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getCustomerReliabilityResult
     * get CustomerReliabilityResult
     * @param MT_APPLICATION technical code of the application calling the service. Needs to be agreed with the service provider (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request. Needs to be agreed with the service provider  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Needs to be agreed with the service provider (required)
     * @param MT_COMPANY Company code. Needs to be agreed with the service provider (required)
     * @param MT_PARTNER Partner belonging to the company. It describe a subset of NEXI customer related to the specified partner. Needs to be agreed with the service provider (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client. Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @param getCustomerReliabilityResult  (required)
     * @return GetCustomerReliabilityResultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetCustomerReliabilityResultResponse getCustomerReliabilityResult(String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_PARTNER, String MT_REQUEST_ID, String MT_SESSION_ID, GetCustomerReliabilityResultRequest getCustomerReliabilityResult) throws ApiException {
        ApiResponse<GetCustomerReliabilityResultResponse> resp = getCustomerReliabilityResultWithHttpInfo(MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_PARTNER, MT_REQUEST_ID, MT_SESSION_ID, getCustomerReliabilityResult);
        return resp.getData();
    }

    /**
     * getCustomerReliabilityResult
     * get CustomerReliabilityResult
     * @param MT_APPLICATION technical code of the application calling the service. Needs to be agreed with the service provider (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request. Needs to be agreed with the service provider  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Needs to be agreed with the service provider (required)
     * @param MT_COMPANY Company code. Needs to be agreed with the service provider (required)
     * @param MT_PARTNER Partner belonging to the company. It describe a subset of NEXI customer related to the specified partner. Needs to be agreed with the service provider (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client. Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @param getCustomerReliabilityResult  (required)
     * @return ApiResponse&lt;GetCustomerReliabilityResultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetCustomerReliabilityResultResponse> getCustomerReliabilityResultWithHttpInfo(String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_PARTNER, String MT_REQUEST_ID, String MT_SESSION_ID, GetCustomerReliabilityResultRequest getCustomerReliabilityResult) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerReliabilityResultValidateBeforeCall(MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_PARTNER, MT_REQUEST_ID, MT_SESSION_ID, getCustomerReliabilityResult, null, null);
        Type localVarReturnType = new TypeToken<GetCustomerReliabilityResultResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getCustomerReliabilityResult (asynchronously)
     * get CustomerReliabilityResult
     * @param MT_APPLICATION technical code of the application calling the service. Needs to be agreed with the service provider (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request. Needs to be agreed with the service provider  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Needs to be agreed with the service provider (required)
     * @param MT_COMPANY Company code. Needs to be agreed with the service provider (required)
     * @param MT_PARTNER Partner belonging to the company. It describe a subset of NEXI customer related to the specified partner. Needs to be agreed with the service provider (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client. Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @param getCustomerReliabilityResult  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerReliabilityResultAsync(String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_PARTNER, String MT_REQUEST_ID, String MT_SESSION_ID, GetCustomerReliabilityResultRequest getCustomerReliabilityResult, final ApiCallback<GetCustomerReliabilityResultResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerReliabilityResultValidateBeforeCall(MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_PARTNER, MT_REQUEST_ID, MT_SESSION_ID, getCustomerReliabilityResult, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetCustomerReliabilityResultResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for verifyCustomerReliability
     * @param MT_APPLICATION technical code of the application calling the service. Needs to be agreed with the service provider (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request. Needs to be agreed with the service provider  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Needs to be agreed with the service provider (required)
     * @param MT_COMPANY Company code. Needs to be agreed with the service provider (required)
     * @param MT_PARTNER Partner belonging to the company. It describe a subset of NEXI customer related to the specified partner. Needs to be agreed with the service provider (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client. Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @param verifyCustomerReliabilityRequest  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call verifyCustomerReliabilityCall(String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_PARTNER, String MT_REQUEST_ID, String MT_SESSION_ID, VerifyCustomerReliabilityRequest verifyCustomerReliabilityRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = verifyCustomerReliabilityRequest;

        // create path and map variables
        String localVarPath = "/verifyCustomerReliability";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (MT_APPLICATION != null)
        localVarHeaderParams.put("MT_APPLICATION", apiClient.parameterToString(MT_APPLICATION));
        if (MT_USER != null)
        localVarHeaderParams.put("MT_USER", apiClient.parameterToString(MT_USER));
        if (MT_CHANNEL != null)
        localVarHeaderParams.put("MT_CHANNEL", apiClient.parameterToString(MT_CHANNEL));
        if (MT_COMPANY_GROUP != null)
        localVarHeaderParams.put("MT_COMPANY_GROUP", apiClient.parameterToString(MT_COMPANY_GROUP));
        if (MT_COMPANY != null)
        localVarHeaderParams.put("MT_COMPANY", apiClient.parameterToString(MT_COMPANY));
        if (MT_PARTNER != null)
        localVarHeaderParams.put("MT_PARTNER", apiClient.parameterToString(MT_PARTNER));
        if (MT_REQUEST_ID != null)
        localVarHeaderParams.put("MT_REQUEST_ID", apiClient.parameterToString(MT_REQUEST_ID));
        if (MT_SESSION_ID != null)
        localVarHeaderParams.put("MT_SESSION_ID", apiClient.parameterToString(MT_SESSION_ID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call verifyCustomerReliabilityValidateBeforeCall(String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_PARTNER, String MT_REQUEST_ID, String MT_SESSION_ID, VerifyCustomerReliabilityRequest verifyCustomerReliabilityRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'MT_APPLICATION' is set
        if (MT_APPLICATION == null) {
            throw new ApiException("Missing the required parameter 'MT_APPLICATION' when calling verifyCustomerReliability(Async)");
        }
        
        // verify the required parameter 'MT_USER' is set
        if (MT_USER == null) {
            throw new ApiException("Missing the required parameter 'MT_USER' when calling verifyCustomerReliability(Async)");
        }
        
        // verify the required parameter 'MT_CHANNEL' is set
        if (MT_CHANNEL == null) {
            throw new ApiException("Missing the required parameter 'MT_CHANNEL' when calling verifyCustomerReliability(Async)");
        }
        
        // verify the required parameter 'MT_COMPANY_GROUP' is set
        if (MT_COMPANY_GROUP == null) {
            throw new ApiException("Missing the required parameter 'MT_COMPANY_GROUP' when calling verifyCustomerReliability(Async)");
        }
        
        // verify the required parameter 'MT_COMPANY' is set
        if (MT_COMPANY == null) {
            throw new ApiException("Missing the required parameter 'MT_COMPANY' when calling verifyCustomerReliability(Async)");
        }
        
        // verify the required parameter 'MT_PARTNER' is set
        if (MT_PARTNER == null) {
            throw new ApiException("Missing the required parameter 'MT_PARTNER' when calling verifyCustomerReliability(Async)");
        }
        
        // verify the required parameter 'MT_REQUEST_ID' is set
        if (MT_REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'MT_REQUEST_ID' when calling verifyCustomerReliability(Async)");
        }
        
        // verify the required parameter 'MT_SESSION_ID' is set
        if (MT_SESSION_ID == null) {
            throw new ApiException("Missing the required parameter 'MT_SESSION_ID' when calling verifyCustomerReliability(Async)");
        }
        
        // verify the required parameter 'verifyCustomerReliabilityRequest' is set
        if (verifyCustomerReliabilityRequest == null) {
            throw new ApiException("Missing the required parameter 'verifyCustomerReliabilityRequest' when calling verifyCustomerReliability(Async)");
        }
        

        com.squareup.okhttp.Call call = verifyCustomerReliabilityCall(MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_PARTNER, MT_REQUEST_ID, MT_SESSION_ID, verifyCustomerReliabilityRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * verifyCustomerReliability
     * get verifyCustomerReliability
     * @param MT_APPLICATION technical code of the application calling the service. Needs to be agreed with the service provider (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request. Needs to be agreed with the service provider  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Needs to be agreed with the service provider (required)
     * @param MT_COMPANY Company code. Needs to be agreed with the service provider (required)
     * @param MT_PARTNER Partner belonging to the company. It describe a subset of NEXI customer related to the specified partner. Needs to be agreed with the service provider (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client. Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @param verifyCustomerReliabilityRequest  (required)
     * @return VerifyCustomerReliabilityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerifyCustomerReliabilityResponse verifyCustomerReliability(String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_PARTNER, String MT_REQUEST_ID, String MT_SESSION_ID, VerifyCustomerReliabilityRequest verifyCustomerReliabilityRequest) throws ApiException {
        ApiResponse<VerifyCustomerReliabilityResponse> resp = verifyCustomerReliabilityWithHttpInfo(MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_PARTNER, MT_REQUEST_ID, MT_SESSION_ID, verifyCustomerReliabilityRequest);
        return resp.getData();
    }

    /**
     * verifyCustomerReliability
     * get verifyCustomerReliability
     * @param MT_APPLICATION technical code of the application calling the service. Needs to be agreed with the service provider (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request. Needs to be agreed with the service provider  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Needs to be agreed with the service provider (required)
     * @param MT_COMPANY Company code. Needs to be agreed with the service provider (required)
     * @param MT_PARTNER Partner belonging to the company. It describe a subset of NEXI customer related to the specified partner. Needs to be agreed with the service provider (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client. Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @param verifyCustomerReliabilityRequest  (required)
     * @return ApiResponse&lt;VerifyCustomerReliabilityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerifyCustomerReliabilityResponse> verifyCustomerReliabilityWithHttpInfo(String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_PARTNER, String MT_REQUEST_ID, String MT_SESSION_ID, VerifyCustomerReliabilityRequest verifyCustomerReliabilityRequest) throws ApiException {
        com.squareup.okhttp.Call call = verifyCustomerReliabilityValidateBeforeCall(MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_PARTNER, MT_REQUEST_ID, MT_SESSION_ID, verifyCustomerReliabilityRequest, null, null);
        Type localVarReturnType = new TypeToken<VerifyCustomerReliabilityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * verifyCustomerReliability (asynchronously)
     * get verifyCustomerReliability
     * @param MT_APPLICATION technical code of the application calling the service. Needs to be agreed with the service provider (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request. Needs to be agreed with the service provider  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Needs to be agreed with the service provider (required)
     * @param MT_COMPANY Company code. Needs to be agreed with the service provider (required)
     * @param MT_PARTNER Partner belonging to the company. It describe a subset of NEXI customer related to the specified partner. Needs to be agreed with the service provider (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client. Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @param verifyCustomerReliabilityRequest  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call verifyCustomerReliabilityAsync(String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_PARTNER, String MT_REQUEST_ID, String MT_SESSION_ID, VerifyCustomerReliabilityRequest verifyCustomerReliabilityRequest, final ApiCallback<VerifyCustomerReliabilityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = verifyCustomerReliabilityValidateBeforeCall(MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_PARTNER, MT_REQUEST_ID, MT_SESSION_ID, verifyCustomerReliabilityRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerifyCustomerReliabilityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
