/*
 * Notification API
 * <b>Notification</b>  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BaseResponse;
import io.swagger.client.model.GetEmailTrackingDetailsRequest;
import io.swagger.client.model.GetEmailTrackingDetailsResponse;
import io.swagger.client.model.SendEmailRequest;
import io.swagger.client.model.SendEmailResponse;
import io.swagger.client.model.SendPushRequest;
import io.swagger.client.model.SendPushResponse;
import io.swagger.client.model.SendSmsRequest;
import io.swagger.client.model.SendSmsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificationApi {
    private ApiClient apiClient;

    public NotificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getEmailTrackingDetails
     * @param getEmailTrackingDetailsRequest  (required)
     * @param MT_APPLICATION technical code of the application calling the service.   &#39;Possible values - [Card Holder Portal (CH), On Boarding Issuing (OBI)]&#39; (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request - [WEB, MOB]  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Possible values - [NEXI] (required)
     * @param MT_COMPANY Company code. Possible values - [NEXI] (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client.  Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_PARTNER Partner belonging to the company.  It describe a subset of NEXI customer related to the specified partner.  Possible values - [NEXI] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailTrackingDetailsCall(GetEmailTrackingDetailsRequest getEmailTrackingDetailsRequest, String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_REQUEST_ID, String MT_PARTNER, String MT_SESSION_ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getEmailTrackingDetailsRequest;

        // create path and map variables
        String localVarPath = "/getEmailTrackingDetails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (MT_APPLICATION != null)
        localVarHeaderParams.put("MT_APPLICATION", apiClient.parameterToString(MT_APPLICATION));
        if (MT_USER != null)
        localVarHeaderParams.put("MT_USER", apiClient.parameterToString(MT_USER));
        if (MT_CHANNEL != null)
        localVarHeaderParams.put("MT_CHANNEL", apiClient.parameterToString(MT_CHANNEL));
        if (MT_COMPANY_GROUP != null)
        localVarHeaderParams.put("MT_COMPANY_GROUP", apiClient.parameterToString(MT_COMPANY_GROUP));
        if (MT_COMPANY != null)
        localVarHeaderParams.put("MT_COMPANY", apiClient.parameterToString(MT_COMPANY));
        if (MT_REQUEST_ID != null)
        localVarHeaderParams.put("MT_REQUEST_ID", apiClient.parameterToString(MT_REQUEST_ID));
        if (MT_PARTNER != null)
        localVarHeaderParams.put("MT_PARTNER", apiClient.parameterToString(MT_PARTNER));
        if (MT_SESSION_ID != null)
        localVarHeaderParams.put("MT_SESSION_ID", apiClient.parameterToString(MT_SESSION_ID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailTrackingDetailsValidateBeforeCall(GetEmailTrackingDetailsRequest getEmailTrackingDetailsRequest, String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_REQUEST_ID, String MT_PARTNER, String MT_SESSION_ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getEmailTrackingDetailsRequest' is set
        if (getEmailTrackingDetailsRequest == null) {
            throw new ApiException("Missing the required parameter 'getEmailTrackingDetailsRequest' when calling getEmailTrackingDetails(Async)");
        }
        
        // verify the required parameter 'MT_APPLICATION' is set
        if (MT_APPLICATION == null) {
            throw new ApiException("Missing the required parameter 'MT_APPLICATION' when calling getEmailTrackingDetails(Async)");
        }
        
        // verify the required parameter 'MT_USER' is set
        if (MT_USER == null) {
            throw new ApiException("Missing the required parameter 'MT_USER' when calling getEmailTrackingDetails(Async)");
        }
        
        // verify the required parameter 'MT_CHANNEL' is set
        if (MT_CHANNEL == null) {
            throw new ApiException("Missing the required parameter 'MT_CHANNEL' when calling getEmailTrackingDetails(Async)");
        }
        
        // verify the required parameter 'MT_COMPANY_GROUP' is set
        if (MT_COMPANY_GROUP == null) {
            throw new ApiException("Missing the required parameter 'MT_COMPANY_GROUP' when calling getEmailTrackingDetails(Async)");
        }
        
        // verify the required parameter 'MT_COMPANY' is set
        if (MT_COMPANY == null) {
            throw new ApiException("Missing the required parameter 'MT_COMPANY' when calling getEmailTrackingDetails(Async)");
        }
        
        // verify the required parameter 'MT_REQUEST_ID' is set
        if (MT_REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'MT_REQUEST_ID' when calling getEmailTrackingDetails(Async)");
        }
        
        // verify the required parameter 'MT_PARTNER' is set
        if (MT_PARTNER == null) {
            throw new ApiException("Missing the required parameter 'MT_PARTNER' when calling getEmailTrackingDetails(Async)");
        }
        
        // verify the required parameter 'MT_SESSION_ID' is set
        if (MT_SESSION_ID == null) {
            throw new ApiException("Missing the required parameter 'MT_SESSION_ID' when calling getEmailTrackingDetails(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailTrackingDetailsCall(getEmailTrackingDetailsRequest, MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_REQUEST_ID, MT_PARTNER, MT_SESSION_ID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the details of an email tracked
     * Get the details of an email tracked inquiring by date range (required) and at least one of other request fields (fromAddress, toAddress,ccAddress, templateId). The result are paginated.
     * @param getEmailTrackingDetailsRequest  (required)
     * @param MT_APPLICATION technical code of the application calling the service.   &#39;Possible values - [Card Holder Portal (CH), On Boarding Issuing (OBI)]&#39; (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request - [WEB, MOB]  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Possible values - [NEXI] (required)
     * @param MT_COMPANY Company code. Possible values - [NEXI] (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client.  Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_PARTNER Partner belonging to the company.  It describe a subset of NEXI customer related to the specified partner.  Possible values - [NEXI] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @return GetEmailTrackingDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetEmailTrackingDetailsResponse getEmailTrackingDetails(GetEmailTrackingDetailsRequest getEmailTrackingDetailsRequest, String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_REQUEST_ID, String MT_PARTNER, String MT_SESSION_ID) throws ApiException {
        ApiResponse<GetEmailTrackingDetailsResponse> resp = getEmailTrackingDetailsWithHttpInfo(getEmailTrackingDetailsRequest, MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_REQUEST_ID, MT_PARTNER, MT_SESSION_ID);
        return resp.getData();
    }

    /**
     * Get the details of an email tracked
     * Get the details of an email tracked inquiring by date range (required) and at least one of other request fields (fromAddress, toAddress,ccAddress, templateId). The result are paginated.
     * @param getEmailTrackingDetailsRequest  (required)
     * @param MT_APPLICATION technical code of the application calling the service.   &#39;Possible values - [Card Holder Portal (CH), On Boarding Issuing (OBI)]&#39; (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request - [WEB, MOB]  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Possible values - [NEXI] (required)
     * @param MT_COMPANY Company code. Possible values - [NEXI] (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client.  Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_PARTNER Partner belonging to the company.  It describe a subset of NEXI customer related to the specified partner.  Possible values - [NEXI] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @return ApiResponse&lt;GetEmailTrackingDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetEmailTrackingDetailsResponse> getEmailTrackingDetailsWithHttpInfo(GetEmailTrackingDetailsRequest getEmailTrackingDetailsRequest, String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_REQUEST_ID, String MT_PARTNER, String MT_SESSION_ID) throws ApiException {
        com.squareup.okhttp.Call call = getEmailTrackingDetailsValidateBeforeCall(getEmailTrackingDetailsRequest, MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_REQUEST_ID, MT_PARTNER, MT_SESSION_ID, null, null);
        Type localVarReturnType = new TypeToken<GetEmailTrackingDetailsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the details of an email tracked (asynchronously)
     * Get the details of an email tracked inquiring by date range (required) and at least one of other request fields (fromAddress, toAddress,ccAddress, templateId). The result are paginated.
     * @param getEmailTrackingDetailsRequest  (required)
     * @param MT_APPLICATION technical code of the application calling the service.   &#39;Possible values - [Card Holder Portal (CH), On Boarding Issuing (OBI)]&#39; (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request - [WEB, MOB]  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Possible values - [NEXI] (required)
     * @param MT_COMPANY Company code. Possible values - [NEXI] (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client.  Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_PARTNER Partner belonging to the company.  It describe a subset of NEXI customer related to the specified partner.  Possible values - [NEXI] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailTrackingDetailsAsync(GetEmailTrackingDetailsRequest getEmailTrackingDetailsRequest, String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_REQUEST_ID, String MT_PARTNER, String MT_SESSION_ID, final ApiCallback<GetEmailTrackingDetailsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailTrackingDetailsValidateBeforeCall(getEmailTrackingDetailsRequest, MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_REQUEST_ID, MT_PARTNER, MT_SESSION_ID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetEmailTrackingDetailsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendEmail
     * @param sendEmailRequest  (required)
     * @param MT_APPLICATION technical code of the application calling the service.   &#39;Possible values - [Card Holder Portal (CH), On Boarding Issuing (OBI)]&#39; (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request - [WEB, MOB]  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Possible values - [NEXI] (required)
     * @param MT_COMPANY Company code. Possible values - [NEXI] (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client.  Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_PARTNER Partner belonging to the company.  It describe a subset of NEXI customer related to the specified partner.  Possible values - [NEXI] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendEmailCall(SendEmailRequest sendEmailRequest, String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_REQUEST_ID, String MT_PARTNER, String MT_SESSION_ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = sendEmailRequest;

        // create path and map variables
        String localVarPath = "/sendEmail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (MT_APPLICATION != null)
        localVarHeaderParams.put("MT_APPLICATION", apiClient.parameterToString(MT_APPLICATION));
        if (MT_USER != null)
        localVarHeaderParams.put("MT_USER", apiClient.parameterToString(MT_USER));
        if (MT_CHANNEL != null)
        localVarHeaderParams.put("MT_CHANNEL", apiClient.parameterToString(MT_CHANNEL));
        if (MT_COMPANY_GROUP != null)
        localVarHeaderParams.put("MT_COMPANY_GROUP", apiClient.parameterToString(MT_COMPANY_GROUP));
        if (MT_COMPANY != null)
        localVarHeaderParams.put("MT_COMPANY", apiClient.parameterToString(MT_COMPANY));
        if (MT_REQUEST_ID != null)
        localVarHeaderParams.put("MT_REQUEST_ID", apiClient.parameterToString(MT_REQUEST_ID));
        if (MT_PARTNER != null)
        localVarHeaderParams.put("MT_PARTNER", apiClient.parameterToString(MT_PARTNER));
        if (MT_SESSION_ID != null)
        localVarHeaderParams.put("MT_SESSION_ID", apiClient.parameterToString(MT_SESSION_ID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendEmailValidateBeforeCall(SendEmailRequest sendEmailRequest, String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_REQUEST_ID, String MT_PARTNER, String MT_SESSION_ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sendEmailRequest' is set
        if (sendEmailRequest == null) {
            throw new ApiException("Missing the required parameter 'sendEmailRequest' when calling sendEmail(Async)");
        }
        
        // verify the required parameter 'MT_APPLICATION' is set
        if (MT_APPLICATION == null) {
            throw new ApiException("Missing the required parameter 'MT_APPLICATION' when calling sendEmail(Async)");
        }
        
        // verify the required parameter 'MT_USER' is set
        if (MT_USER == null) {
            throw new ApiException("Missing the required parameter 'MT_USER' when calling sendEmail(Async)");
        }
        
        // verify the required parameter 'MT_CHANNEL' is set
        if (MT_CHANNEL == null) {
            throw new ApiException("Missing the required parameter 'MT_CHANNEL' when calling sendEmail(Async)");
        }
        
        // verify the required parameter 'MT_COMPANY_GROUP' is set
        if (MT_COMPANY_GROUP == null) {
            throw new ApiException("Missing the required parameter 'MT_COMPANY_GROUP' when calling sendEmail(Async)");
        }
        
        // verify the required parameter 'MT_COMPANY' is set
        if (MT_COMPANY == null) {
            throw new ApiException("Missing the required parameter 'MT_COMPANY' when calling sendEmail(Async)");
        }
        
        // verify the required parameter 'MT_REQUEST_ID' is set
        if (MT_REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'MT_REQUEST_ID' when calling sendEmail(Async)");
        }
        
        // verify the required parameter 'MT_PARTNER' is set
        if (MT_PARTNER == null) {
            throw new ApiException("Missing the required parameter 'MT_PARTNER' when calling sendEmail(Async)");
        }
        
        // verify the required parameter 'MT_SESSION_ID' is set
        if (MT_SESSION_ID == null) {
            throw new ApiException("Missing the required parameter 'MT_SESSION_ID' when calling sendEmail(Async)");
        }
        

        com.squareup.okhttp.Call call = sendEmailCall(sendEmailRequest, MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_REQUEST_ID, MT_PARTNER, MT_SESSION_ID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Send Email and track the email details.
     * Send Email and track the email details (if flagTrack is true). If the templateId is set, the email field will be retrieved by email template (previously agreed).
     * @param sendEmailRequest  (required)
     * @param MT_APPLICATION technical code of the application calling the service.   &#39;Possible values - [Card Holder Portal (CH), On Boarding Issuing (OBI)]&#39; (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request - [WEB, MOB]  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Possible values - [NEXI] (required)
     * @param MT_COMPANY Company code. Possible values - [NEXI] (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client.  Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_PARTNER Partner belonging to the company.  It describe a subset of NEXI customer related to the specified partner.  Possible values - [NEXI] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @return SendEmailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SendEmailResponse sendEmail(SendEmailRequest sendEmailRequest, String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_REQUEST_ID, String MT_PARTNER, String MT_SESSION_ID) throws ApiException {
        ApiResponse<SendEmailResponse> resp = sendEmailWithHttpInfo(sendEmailRequest, MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_REQUEST_ID, MT_PARTNER, MT_SESSION_ID);
        return resp.getData();
    }

    /**
     * Send Email and track the email details.
     * Send Email and track the email details (if flagTrack is true). If the templateId is set, the email field will be retrieved by email template (previously agreed).
     * @param sendEmailRequest  (required)
     * @param MT_APPLICATION technical code of the application calling the service.   &#39;Possible values - [Card Holder Portal (CH), On Boarding Issuing (OBI)]&#39; (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request - [WEB, MOB]  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Possible values - [NEXI] (required)
     * @param MT_COMPANY Company code. Possible values - [NEXI] (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client.  Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_PARTNER Partner belonging to the company.  It describe a subset of NEXI customer related to the specified partner.  Possible values - [NEXI] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @return ApiResponse&lt;SendEmailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SendEmailResponse> sendEmailWithHttpInfo(SendEmailRequest sendEmailRequest, String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_REQUEST_ID, String MT_PARTNER, String MT_SESSION_ID) throws ApiException {
        com.squareup.okhttp.Call call = sendEmailValidateBeforeCall(sendEmailRequest, MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_REQUEST_ID, MT_PARTNER, MT_SESSION_ID, null, null);
        Type localVarReturnType = new TypeToken<SendEmailResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send Email and track the email details. (asynchronously)
     * Send Email and track the email details (if flagTrack is true). If the templateId is set, the email field will be retrieved by email template (previously agreed).
     * @param sendEmailRequest  (required)
     * @param MT_APPLICATION technical code of the application calling the service.   &#39;Possible values - [Card Holder Portal (CH), On Boarding Issuing (OBI)]&#39; (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request - [WEB, MOB]  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Possible values - [NEXI] (required)
     * @param MT_COMPANY Company code. Possible values - [NEXI] (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client.  Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_PARTNER Partner belonging to the company.  It describe a subset of NEXI customer related to the specified partner.  Possible values - [NEXI] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendEmailAsync(SendEmailRequest sendEmailRequest, String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_REQUEST_ID, String MT_PARTNER, String MT_SESSION_ID, final ApiCallback<SendEmailResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendEmailValidateBeforeCall(sendEmailRequest, MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_REQUEST_ID, MT_PARTNER, MT_SESSION_ID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SendEmailResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendPush
     * @param sendPushRequest  (required)
     * @param MT_APPLICATION technical code of the application calling the service.   &#39;Possible values - [Card Holder Portal (CH), On Boarding Issuing (OBI)]&#39; (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request - [WEB, MOB]  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Possible values - [NEXI] (required)
     * @param MT_COMPANY Company code. Possible values - [NEXI] (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client.  Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_PARTNER Partner belonging to the company.  It describe a subset of NEXI customer related to the specified partner.  Possible values - [NEXI] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendPushCall(SendPushRequest sendPushRequest, String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_REQUEST_ID, String MT_PARTNER, String MT_SESSION_ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = sendPushRequest;

        // create path and map variables
        String localVarPath = "/sendPush";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (MT_APPLICATION != null)
        localVarHeaderParams.put("MT_APPLICATION", apiClient.parameterToString(MT_APPLICATION));
        if (MT_USER != null)
        localVarHeaderParams.put("MT_USER", apiClient.parameterToString(MT_USER));
        if (MT_CHANNEL != null)
        localVarHeaderParams.put("MT_CHANNEL", apiClient.parameterToString(MT_CHANNEL));
        if (MT_COMPANY_GROUP != null)
        localVarHeaderParams.put("MT_COMPANY_GROUP", apiClient.parameterToString(MT_COMPANY_GROUP));
        if (MT_COMPANY != null)
        localVarHeaderParams.put("MT_COMPANY", apiClient.parameterToString(MT_COMPANY));
        if (MT_REQUEST_ID != null)
        localVarHeaderParams.put("MT_REQUEST_ID", apiClient.parameterToString(MT_REQUEST_ID));
        if (MT_PARTNER != null)
        localVarHeaderParams.put("MT_PARTNER", apiClient.parameterToString(MT_PARTNER));
        if (MT_SESSION_ID != null)
        localVarHeaderParams.put("MT_SESSION_ID", apiClient.parameterToString(MT_SESSION_ID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendPushValidateBeforeCall(SendPushRequest sendPushRequest, String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_REQUEST_ID, String MT_PARTNER, String MT_SESSION_ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sendPushRequest' is set
        if (sendPushRequest == null) {
            throw new ApiException("Missing the required parameter 'sendPushRequest' when calling sendPush(Async)");
        }
        
        // verify the required parameter 'MT_APPLICATION' is set
        if (MT_APPLICATION == null) {
            throw new ApiException("Missing the required parameter 'MT_APPLICATION' when calling sendPush(Async)");
        }
        
        // verify the required parameter 'MT_USER' is set
        if (MT_USER == null) {
            throw new ApiException("Missing the required parameter 'MT_USER' when calling sendPush(Async)");
        }
        
        // verify the required parameter 'MT_CHANNEL' is set
        if (MT_CHANNEL == null) {
            throw new ApiException("Missing the required parameter 'MT_CHANNEL' when calling sendPush(Async)");
        }
        
        // verify the required parameter 'MT_COMPANY_GROUP' is set
        if (MT_COMPANY_GROUP == null) {
            throw new ApiException("Missing the required parameter 'MT_COMPANY_GROUP' when calling sendPush(Async)");
        }
        
        // verify the required parameter 'MT_COMPANY' is set
        if (MT_COMPANY == null) {
            throw new ApiException("Missing the required parameter 'MT_COMPANY' when calling sendPush(Async)");
        }
        
        // verify the required parameter 'MT_REQUEST_ID' is set
        if (MT_REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'MT_REQUEST_ID' when calling sendPush(Async)");
        }
        
        // verify the required parameter 'MT_PARTNER' is set
        if (MT_PARTNER == null) {
            throw new ApiException("Missing the required parameter 'MT_PARTNER' when calling sendPush(Async)");
        }
        
        // verify the required parameter 'MT_SESSION_ID' is set
        if (MT_SESSION_ID == null) {
            throw new ApiException("Missing the required parameter 'MT_SESSION_ID' when calling sendPush(Async)");
        }
        

        com.squareup.okhttp.Call call = sendPushCall(sendPushRequest, MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_REQUEST_ID, MT_PARTNER, MT_SESSION_ID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Send Push
     * Send push; the push text will be retrieved by push template (previously agreed).
     * @param sendPushRequest  (required)
     * @param MT_APPLICATION technical code of the application calling the service.   &#39;Possible values - [Card Holder Portal (CH), On Boarding Issuing (OBI)]&#39; (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request - [WEB, MOB]  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Possible values - [NEXI] (required)
     * @param MT_COMPANY Company code. Possible values - [NEXI] (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client.  Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_PARTNER Partner belonging to the company.  It describe a subset of NEXI customer related to the specified partner.  Possible values - [NEXI] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @return SendPushResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SendPushResponse sendPush(SendPushRequest sendPushRequest, String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_REQUEST_ID, String MT_PARTNER, String MT_SESSION_ID) throws ApiException {
        ApiResponse<SendPushResponse> resp = sendPushWithHttpInfo(sendPushRequest, MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_REQUEST_ID, MT_PARTNER, MT_SESSION_ID);
        return resp.getData();
    }

    /**
     * Send Push
     * Send push; the push text will be retrieved by push template (previously agreed).
     * @param sendPushRequest  (required)
     * @param MT_APPLICATION technical code of the application calling the service.   &#39;Possible values - [Card Holder Portal (CH), On Boarding Issuing (OBI)]&#39; (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request - [WEB, MOB]  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Possible values - [NEXI] (required)
     * @param MT_COMPANY Company code. Possible values - [NEXI] (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client.  Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_PARTNER Partner belonging to the company.  It describe a subset of NEXI customer related to the specified partner.  Possible values - [NEXI] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @return ApiResponse&lt;SendPushResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SendPushResponse> sendPushWithHttpInfo(SendPushRequest sendPushRequest, String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_REQUEST_ID, String MT_PARTNER, String MT_SESSION_ID) throws ApiException {
        com.squareup.okhttp.Call call = sendPushValidateBeforeCall(sendPushRequest, MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_REQUEST_ID, MT_PARTNER, MT_SESSION_ID, null, null);
        Type localVarReturnType = new TypeToken<SendPushResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send Push (asynchronously)
     * Send push; the push text will be retrieved by push template (previously agreed).
     * @param sendPushRequest  (required)
     * @param MT_APPLICATION technical code of the application calling the service.   &#39;Possible values - [Card Holder Portal (CH), On Boarding Issuing (OBI)]&#39; (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request - [WEB, MOB]  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Possible values - [NEXI] (required)
     * @param MT_COMPANY Company code. Possible values - [NEXI] (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client.  Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_PARTNER Partner belonging to the company.  It describe a subset of NEXI customer related to the specified partner.  Possible values - [NEXI] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendPushAsync(SendPushRequest sendPushRequest, String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_REQUEST_ID, String MT_PARTNER, String MT_SESSION_ID, final ApiCallback<SendPushResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendPushValidateBeforeCall(sendPushRequest, MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_REQUEST_ID, MT_PARTNER, MT_SESSION_ID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SendPushResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendSms
     * @param sendSmsRequest  (required)
     * @param MT_APPLICATION technical code of the application calling the service.   &#39;Possible values - [Card Holder Portal (CH), On Boarding Issuing (OBI)]&#39; (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request - [WEB, MOB]  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Possible values - [NEXI] (required)
     * @param MT_COMPANY Company code. Possible values - [NEXI] (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client.  Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_PARTNER Partner belonging to the company.  It describe a subset of NEXI customer related to the specified partner.  Possible values - [NEXI] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendSmsCall(SendSmsRequest sendSmsRequest, String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_REQUEST_ID, String MT_PARTNER, String MT_SESSION_ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = sendSmsRequest;

        // create path and map variables
        String localVarPath = "/sendSms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (MT_APPLICATION != null)
        localVarHeaderParams.put("MT_APPLICATION", apiClient.parameterToString(MT_APPLICATION));
        if (MT_USER != null)
        localVarHeaderParams.put("MT_USER", apiClient.parameterToString(MT_USER));
        if (MT_CHANNEL != null)
        localVarHeaderParams.put("MT_CHANNEL", apiClient.parameterToString(MT_CHANNEL));
        if (MT_COMPANY_GROUP != null)
        localVarHeaderParams.put("MT_COMPANY_GROUP", apiClient.parameterToString(MT_COMPANY_GROUP));
        if (MT_COMPANY != null)
        localVarHeaderParams.put("MT_COMPANY", apiClient.parameterToString(MT_COMPANY));
        if (MT_REQUEST_ID != null)
        localVarHeaderParams.put("MT_REQUEST_ID", apiClient.parameterToString(MT_REQUEST_ID));
        if (MT_PARTNER != null)
        localVarHeaderParams.put("MT_PARTNER", apiClient.parameterToString(MT_PARTNER));
        if (MT_SESSION_ID != null)
        localVarHeaderParams.put("MT_SESSION_ID", apiClient.parameterToString(MT_SESSION_ID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendSmsValidateBeforeCall(SendSmsRequest sendSmsRequest, String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_REQUEST_ID, String MT_PARTNER, String MT_SESSION_ID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sendSmsRequest' is set
        if (sendSmsRequest == null) {
            throw new ApiException("Missing the required parameter 'sendSmsRequest' when calling sendSms(Async)");
        }
        
        // verify the required parameter 'MT_APPLICATION' is set
        if (MT_APPLICATION == null) {
            throw new ApiException("Missing the required parameter 'MT_APPLICATION' when calling sendSms(Async)");
        }
        
        // verify the required parameter 'MT_USER' is set
        if (MT_USER == null) {
            throw new ApiException("Missing the required parameter 'MT_USER' when calling sendSms(Async)");
        }
        
        // verify the required parameter 'MT_CHANNEL' is set
        if (MT_CHANNEL == null) {
            throw new ApiException("Missing the required parameter 'MT_CHANNEL' when calling sendSms(Async)");
        }
        
        // verify the required parameter 'MT_COMPANY_GROUP' is set
        if (MT_COMPANY_GROUP == null) {
            throw new ApiException("Missing the required parameter 'MT_COMPANY_GROUP' when calling sendSms(Async)");
        }
        
        // verify the required parameter 'MT_COMPANY' is set
        if (MT_COMPANY == null) {
            throw new ApiException("Missing the required parameter 'MT_COMPANY' when calling sendSms(Async)");
        }
        
        // verify the required parameter 'MT_REQUEST_ID' is set
        if (MT_REQUEST_ID == null) {
            throw new ApiException("Missing the required parameter 'MT_REQUEST_ID' when calling sendSms(Async)");
        }
        
        // verify the required parameter 'MT_PARTNER' is set
        if (MT_PARTNER == null) {
            throw new ApiException("Missing the required parameter 'MT_PARTNER' when calling sendSms(Async)");
        }
        
        // verify the required parameter 'MT_SESSION_ID' is set
        if (MT_SESSION_ID == null) {
            throw new ApiException("Missing the required parameter 'MT_SESSION_ID' when calling sendSms(Async)");
        }
        

        com.squareup.okhttp.Call call = sendSmsCall(sendSmsRequest, MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_REQUEST_ID, MT_PARTNER, MT_SESSION_ID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Send Sms
     * Send sms; the sms text will be retrieved by sms template (previously agreed).
     * @param sendSmsRequest  (required)
     * @param MT_APPLICATION technical code of the application calling the service.   &#39;Possible values - [Card Holder Portal (CH), On Boarding Issuing (OBI)]&#39; (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request - [WEB, MOB]  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Possible values - [NEXI] (required)
     * @param MT_COMPANY Company code. Possible values - [NEXI] (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client.  Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_PARTNER Partner belonging to the company.  It describe a subset of NEXI customer related to the specified partner.  Possible values - [NEXI] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @return SendSmsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SendSmsResponse sendSms(SendSmsRequest sendSmsRequest, String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_REQUEST_ID, String MT_PARTNER, String MT_SESSION_ID) throws ApiException {
        ApiResponse<SendSmsResponse> resp = sendSmsWithHttpInfo(sendSmsRequest, MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_REQUEST_ID, MT_PARTNER, MT_SESSION_ID);
        return resp.getData();
    }

    /**
     * Send Sms
     * Send sms; the sms text will be retrieved by sms template (previously agreed).
     * @param sendSmsRequest  (required)
     * @param MT_APPLICATION technical code of the application calling the service.   &#39;Possible values - [Card Holder Portal (CH), On Boarding Issuing (OBI)]&#39; (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request - [WEB, MOB]  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Possible values - [NEXI] (required)
     * @param MT_COMPANY Company code. Possible values - [NEXI] (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client.  Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_PARTNER Partner belonging to the company.  It describe a subset of NEXI customer related to the specified partner.  Possible values - [NEXI] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @return ApiResponse&lt;SendSmsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SendSmsResponse> sendSmsWithHttpInfo(SendSmsRequest sendSmsRequest, String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_REQUEST_ID, String MT_PARTNER, String MT_SESSION_ID) throws ApiException {
        com.squareup.okhttp.Call call = sendSmsValidateBeforeCall(sendSmsRequest, MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_REQUEST_ID, MT_PARTNER, MT_SESSION_ID, null, null);
        Type localVarReturnType = new TypeToken<SendSmsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send Sms (asynchronously)
     * Send sms; the sms text will be retrieved by sms template (previously agreed).
     * @param sendSmsRequest  (required)
     * @param MT_APPLICATION technical code of the application calling the service.   &#39;Possible values - [Card Holder Portal (CH), On Boarding Issuing (OBI)]&#39; (required)
     * @param MT_USER user identifier of the request (username , userid , ...) (required)
     * @param MT_CHANNEL channel code of the request - [WEB, MOB]  (required)
     * @param MT_COMPANY_GROUP Company Group identification code. Possible values - [NEXI] (required)
     * @param MT_COMPANY Company code. Possible values - [NEXI] (required)
     * @param MT_REQUEST_ID Random unique identification code of the request set by the client.  Example UUID [8119c0ce-17f2-11e8-accf-0ed5f89f718b] (required)
     * @param MT_PARTNER Partner belonging to the company.  It describe a subset of NEXI customer related to the specified partner.  Possible values - [NEXI] (required)
     * @param MT_SESSION_ID Random unique identification code identifying a single session of the client. Example JSESSIONID [b272023f-05ca-44cb-96cd-6d72c72d03f9] (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendSmsAsync(SendSmsRequest sendSmsRequest, String MT_APPLICATION, String MT_USER, String MT_CHANNEL, String MT_COMPANY_GROUP, String MT_COMPANY, String MT_REQUEST_ID, String MT_PARTNER, String MT_SESSION_ID, final ApiCallback<SendSmsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendSmsValidateBeforeCall(sendSmsRequest, MT_APPLICATION, MT_USER, MT_CHANNEL, MT_COMPANY_GROUP, MT_COMPANY, MT_REQUEST_ID, MT_PARTNER, MT_SESSION_ID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SendSmsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
